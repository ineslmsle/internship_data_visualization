from grafanalib.core import Dashboard
from grafanalib._gen import DashboardEncoder
import json
import requests
import mysql.connector
import sys
import os
import haversine

from grafanalib.core import (
    Dashboard,
    GridPos, SqlTarget,
    Table,
)


STOP_ID=0
STOP_CODE=1
STOP_NAME=2
STOP_DESC=3
STOP_LAT=4
STOP_LON=5
ZONE_ID=6
STOP_URL=7
LOCATION_TYPE=8
PARENT_STATION=9

x_dcu_center = 53.3850
y_dcu_center = -6.2578


def get_stops_in_circle(circle_radius_meters):

    with open('/home/ines/internship_2ndyear/tfi-gtfs-main/data/stops.txt', 'r') as f: 
        # Skip the header
        next(f) 
        count = 0
        stops = []
        # Read and process the remaining lines 
        for line in f: 
            if "\"" in line:
                continue

            line = line.split(",")
            x_stop = float(line[STOP_LAT])
            y_stop = float(line[STOP_LON])

            distance=haversine.haversine((x_stop, y_stop), 
                                        (x_dcu_center, y_dcu_center), 
                                        unit=haversine.Unit.METERS)
            
            if distance < circle_radius_meters:
                count += 1
                stops.append(line)
            
    return stops
        

def tfi_sql_query(bus_stop_id):

    query = "SELECT route, headsign, scheduled_arrival \
             FROM sensors.TFI_bus_stop \
             WHERE bus_stop_id = " + bus_stop_id + ";"

    return query

def tfi_dashboard_panels(stops) : 
    dashboard_panels = []
    for stop in stops:

        query = tfi_sql_query(stop[STOP_CODE])
        if(query == None):
            print("unable to create the query")
            return None   

        dashboard_panels.append(
            Table(
                title = stop[STOP_NAME] + " bus stop (" + stop[STOP_CODE] + ")",
                dataSource = "mysql",
                targets = [
                    SqlTarget(
                        rawSql = query,
                        format = "table", 
                    )
                ],
                gridPos=GridPos(h=6, w=24, x=0, y=0),
            )
        )

    return dashboard_panels

def tfi_create_dashboard(stops, diameter) :

    #create the panels
    panels = tfi_dashboard_panels(stops)
    if(panels == None):
        return None

    #create the dashboard
    dashboard = Dashboard(
        title=  "Bus stops for diameter " + str(diameter) + " meters",
        description="dashboard for bus stops",
        tags=[
            'diameter', 
        ],
        timezone="browser",
        panels= panels

    ).auto_panel_ids()

    return dashboard


def get_dashboard_json(dashboard, overwrite=False, message="Updated by grafanlib"):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object

    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps(
        {
            "dashboard": dashboard.to_json_data(),
            "overwrite": overwrite,
            "message": message
        }, sort_keys=True, indent=2, cls=DashboardEncoder)

def upload_to_grafana(json, server, api_key, verify=True):
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response

    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''

    headers = {'Authorization': f"Bearer {api_key}", 'Content-Type': 'application/json'}
    r = requests.post(f"http://{server}/api/dashboards/db", data=json, headers=headers, verify=verify)
    # TODO: add error handling
    print(f"{r.status_code} - {r.content}")


# usage
n = len(sys.argv)
if n <= 2:
    print("Usage: python3 tfi_server_call.py <diameter1> <diameter2> ...")
    sys.exit()

diameters = [int(sys.argv[i]) for i in range(1,n)]

#get the grafana host
grafana_host = os.environ.get('GRAFANA_HOST')
if grafana_host is None:
    print("GRAFANA_HOST environnement variable was not set")
    exit()

#get the grafana api key
grafana_api_key = os.environ.get('GRAFANA_API_KEY')
if grafana_api_key is None:
    print("GRAFANA_API_KEY environnement variable was not set")
    exit()

for diameter in diameters:
    stops=get_stops_in_circle(diameter)
    dashboard = tfi_create_dashboard(stops, diameter)
    if(dashboard == None):
        print("unable to create dashboard")

    my_dashboard_json = get_dashboard_json(dashboard, overwrite=True)
    upload_to_grafana(my_dashboard_json, grafana_host, grafana_api_key)
